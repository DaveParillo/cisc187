(1)
000000056669777 99999911111 + 352324012 + 3 ^ 555557778 *


The expression to be computed is
(((56669777+99999911111)+352324012) ^ 3) * 555557778 =
562400792227677956625810678708149922000000.
The output should omit the first number's 0, and omit the extra space and
line break.

(2)
99999999 990001 * 01119111 55565 33333 + * +  88888888 +

This is equivalent to
((99999999*990001) + (01119111 * (55565+33333)) ) + 88888888 =
99099674628565

(3)
123456789 1111111111 * 111119 2111111 9111111 * + * 1 ^

This is to test if the program can handle 1 as an exponent.
The expression is equivalent to
((123456789*1111111111) * (111119+(2111111*9111111)))^1=
2638486500477638652325851269760

(4)
9 1 + 5 * 0 +
This tests if the program can handle adding zero.
(9+1) * 5 + 0 = 50

(5)
999999999 0 *
This tests if the program can handle multiplying by zero.
The answer is 0.

(6)
9 0 ^
This tests if the program can handle a zero exponent.
The answer is 1.


(7)
5555555 333333 5454353 999999 666666 01 ^ * * +

This tests the error of insufficient operators.
The numbers remaining in the stack are 3636228060866636235 and
5555555.

(8)
3432 3333 9999 + * ^ * * 6666 +

This tests the error of insufficient operands.
The program should ignore the remainder of the input stream until a
new expression begins.


